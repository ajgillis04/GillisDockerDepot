# Traefik - A modern reverse proxy and load balancer.

# Notes:
# Make sure acme.json is created before first run
#   New-Item -ItemType File -Path "C:\path\to\your\docker\directory\acme.json" -Force
#   mkdir traefik
#   mkdir traefik/acme
#   mkdir traefik/rules
#   touch traefik/acme/acme.json
#   chmod 600 traefik/acme/acme.json
#   mkdir ${DOCKERDIR}/logs/traefik
#   touch ${DOCKERDIR}/logs/traefik/traefik.log
#   touch ${DOCKERDIR}/logs/traefik/access.log
#   if testing find line below and uncomment
#    -TRAEFIK_CERTIFICATESRESOLVERS_DNSCLOUDFLARE_ACME_CASERVER: "https://acme-staging-v02.api.letsencrypt.org/directory"
#
#   Check logs/traefik.log and logs/access.log for errors and connections.

services:
  traefik:
    container_name: traefik.${HOST_NAME}
    hostname: traefik.${HOST_NAME}.local
    image: traefik:v3.3
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    networks:
      - mediaserver
    command:
      - --global.checkNewVersion=true
      - --global.sendAnonymousUsage=true
      - --entryPoints.http.address=:80
      - --entryPoints.https.address=:443
      - --entrypoints.https.forwardedHeaders.trustedIPs=${CLOUDFLARE_IPS},${LOCAL_NETWORK}
      - --entryPoints.traefik.address=:8080
      - --api.insecure=true # Disable once up and running for security
      - --api=true
      - --api.dashboard=true
      - --log=true
      - --log.filePath=/logs/traefik.log
      - --log.level=DEBUG # DEBUG, INFO, WARN, ERROR, FATAL, PANIC. Set debug for testing
      - --accessLog=true
      - --accessLog.filePath=/logs/access.log
      - --accessLog.bufferingSize=100
      - --accessLog.filters.statusCodes=204-299,400-499,500-599
      - --providers.docker=true
      - --providers.docker.endpoint=unix:///var/run/docker.sock
      - --providers.docker.exposedByDefault=false
      - --entrypoints.https.http.tls.options=tls-opts@file
      # Testing entrypoints.https.http.tls.certresolver=dns-cloudflare DISABLE for testing
#      - --entrypoints.https.http.tls.certresolver=dns-cloudflare
      - --entrypoints.https.http.tls.domains[0].main=${DOMAINNAME}
      - --entrypoints.https.http.tls.domains[0].sans=*.$DOMAINNAME
      - --providers.docker.network=mediaserver
      - --providers.docker.swarmMode=false
      - --providers.file.directory=/rules
      - --providers.file.watch=true
      # Testing Let's Encrypt Staging Server ENABLE after testing
      # - --certificatesResolvers.dns-cloudflare.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory
      - --certificatesResolvers.dns-cloudflare.acme.storage=/acme.json
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.provider=cloudflare
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.resolvers=1.1.1.1:53,1.0.0.1:53
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.delayBeforeCheck=90
    environment:
      TZ: ${TZ}
      DOMAINNAME: ${DOMAINNAME}
      CF_DNS_API_TOKEN_FILE: /run/secrets/cf_dns_api_token
      HTPASSWD_FILE: /run/secrets/basic_auth_credentials      
      # SECONDDOMAINNAME: ${SECONDDOMAINNAME}
    extra_hosts:
      - "host.docker.internal:host-gateway"
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: sd
      - target: 8080
        published: 8085
        protocol: tcp
        mode: host
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "7"
    volumes:
      - ${DOCKERDIR}/traefik/rules:/rules
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ${DOCKERDIR}/traefik/acme/acme.json:/acme.json
      - ${DOCKERDIR}/logs/traefik:/logs
#      - ${DOCKERDIR}/traefik/tracing.yml:/tracing.yml  # Mount the tracing configuration file
    secrets:
      - cf_dns_api_token
      - basic_auth_credentials
    labels:
      - "traefik.enable=true"      
      ## HTTP Routers
      - "traefik.http.routers.http-catchall.entrypoints=http"
      - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      - "traefik.http.routers.traefik-rtr.entrypoints=https"
      - "traefik.http.routers.traefik-rtr.rule=Host(`traefik.${DOMAINNAME}`)"
      - "traefik.http.routers.traefik-rtr.tls=true"
      ## Middlewares
      - "traefik.http.routers.traefik-rtr.middlewares=chain-oauth@file,middlewares-rate-limit@file,middlewares-secure-headers@file"
      ## Docker Network
      - "traefik.docker.network=mediaserver"
      ## HTTP Services
      - "traefik.http.routers.traefik-rtr.service=api@internal"
      ## Watchtower Enable
      - "com.centurylinklabs.watchtower.enable=false"
