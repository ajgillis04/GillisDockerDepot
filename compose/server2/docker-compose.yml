#***********************************************************************************
# Created: Andy Gillis
# Date:    Apr 20, 2020
# Purpose: A Docker Compose to create containers
# Clone:   git clone https://github.com/ajgillis04/GillisDockerDepot.git
# Usage:   docker compose -p mediaserver -f docker-compose.yml up --detach
# Prereqs: Ensure Docker and Docker Compose are installed
# Prereqs 2: You need to create a .env in your root folder with all $variables below
# Prereqs 3: required a /secerts folder with all you sensative data
# Help:    I relied heavily on https://www.smarthomebeginner.com/ at the begining
# **********************************************************************************


######################## Common Vars
# Helps eliminate repetition of sections
# Common environment values
x-environment: &default-tz-puid-pgid
  TZ: $TZ
  PUID: $PUID
  PGID: $PGID

x-environment: &default-tz  
  TZ: $TZ

# Keys common to some of the core services that we always to automatically restart on failure
x-common-keys-core: &common-keys-core
  networks:
    - mediaserver
  security_opt:
    - no-new-privileges:true
  restart: always
 
# Keys common to some of the dependent services/apps
x-common-keys-apps: &common-keys-apps
  networks:
    - mediaserver
  security_opt:
    - no-new-privileges:true
  restart: unless-stopped
 
# Keys common to some of the services in media-services.txt
x-common-keys-media: &common-keys-media
  networks:
    - mediaserver
  security_opt:
    - no-new-privileges:true
  restart: "no"

########################### NETWORKS
# You may customize the network subnet (172.30.0.0/24) below as you please.
# Docker Compose version 3.5 or higher required to define networks this way. You no longer have to create manual.
networks:
  mediaserver:
    name: mediaserver
    driver: bridge
    ipam:
      config:
        - subnet: 172.30.0.0/24
#    external: true
  nextcloud-aio:
    name: nextcloud-aio # This line is not allowed to be changed as otherwise the created network will not be used by the other containers of AIO
    driver: bridge
#    external: true
  pihole_network:    
    name: pihole_network
    driver: macvlan
#    external: true
  default:
    driver: bridge
#    external: true
#  nextcloud:
#    name: nextcloud
#    driver: bridge

########################### SECRETS
secrets:
  htpasswd:
    file: $DOCKERDIR/secrets/htpasswd
  cf_email:
    file: $DOCKERDIR/secrets/cf_email  
  cf_api_key:
    file: $DOCKERDIR/secrets/cf_api_key
  cf_dns_api_token:
    file: $DOCKERDIR/secrets/cf_dns_api_token
  cf_token:
    file: $DOCKERDIR/secrets/cf_token
  awl_cf_token:
    file: $DOCKERDIR/secrets/awl_cf_token
  cloudflared_token:
    file: $DOCKERDIR/secrets/cloudflared_token
  traefik_forward_auth:
    file: $DOCKERDIR/secrets/traefik_forward_auth
  mysql_password:
    file: $DOCKERDIR/secrets/mysql_password
  db_password:
    file: $DOCKERDIR/secrets/db_password
  db_root_password:
    file: $DOCKERDIR/secrets/db_root_password
  pihole_password:
    file: $DOCKERDIR/secrets/pihole_password

########################### Volumes
# these volumne is required to make nextcloud_aio_mastercontainer work
volumes:
  nextcloud_aio_mastercontainer:
    name: nextcloud_aio_mastercontainer # This line is not allowed to be changed

########################### SERVICES
services:

# Traefik 2 - Reverse Proxy
# Touch (create empty files) traefik.log and acme/acme.json. Set acme.json permissions to 600.
# touch $DOCKERDIR/traefik2/acme/acme.json
# chmod 600 $DOCKERDIR/traefik2/acme/acme.json
# touch $DOCKERDIR/traefik2/traefik.log  
# Traefik 2 - Reverse Proxy
  traefik:
    <<: *common-keys-core # See EXTENSION FIELDS at the top
    image: traefik:2.10
    container_name: traefik
    # profiles: ["core", "all"]
#    security_opt:
#      - no-new-privileges:true
#    restart: always
#    networks:
#      mediaserver:
#      nextcloud-aio:
    extra_hosts:
      - host.docker.internal:host-gateway  
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
#      - target: 8090 # New port for Cloudflare Argo Tunnel traffic
#        published: 8090
#        protocol: tcp
#        mode: host
#      - target: 8080 # insecure api wont work
#        published: 8085
#        protocol: tcp
#        mode: host
    command: # CLI arguments
      - --global.checkNewVersion=true
      - --global.sendAnonymousUsage=true
      - --entryPoints.http.address=:80
      - --entryPoints.https.address=:443
#      - --entryPoints.argotunnel.address=:8090 # New entry point for Cloudflare Argo Tunnel
      # Allow these IPs to set the X-Forwarded-* headers - Cloudflare IPs: https://www.cloudflare.com/ips/
      - --entrypoints.https.forwardedHeaders.trustedIPs=$CLOUDFLARE_IPS,$LOCAL_NETWORK
      - --entryPoints.traefik.address=:8080
      - --api=true
      # - --api.insecure=true
      - --api.dashboard=true
#      - --serversTransport.insecureSkipVerify=true
      - --log=true
      - --log.filePath=/logs/traefik.log
      - --log.level=DEBUG # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC
      - --accessLog=true
      - --accessLog.filePath=/logs/access.log
      - --accessLog.bufferingSize=100 # Configuring a buffer of 100 lines
      - --accessLog.filters.statusCodes=204-299,400-499,500-599
      - --providers.docker=true
      - --providers.docker.endpoint=unix:///var/run/docker.sock # Use Docker Socket Proxy instead for improved security
      # - --providers.docker.endpoint=tcp://socket-proxy:2375 # Use this instead of the previous line if you have socket proxy.
      - --providers.docker.exposedByDefault=false
      - --entrypoints.https.http.tls.options=tls-opts@file
      # Add dns-cloudflare as default certresolver for all services. Also enables TLS and no need to specify on individual services
      - --entrypoints.https.http.tls.certresolver=dns-cloudflare
      - --entrypoints.https.http.tls.domains[0].main=$DOMAINNAME
      - --entrypoints.https.http.tls.domains[0].sans=*.$DOMAINNAME
      # - --entrypoints.https.http.tls.domains[1].main=$DOMAINNAME2 # Pulls main cert for second domain
      # - --entrypoints.https.http.tls.domains[1].sans=*.$DOMAINNAME2 # Pulls wildcard cert for second domain
#      - --providers.docker.network=mediaserver,pihole_network,nextcloud-aio
      - --providers.docker.network=mediaserver
      - --providers.docker.swarmMode=false
      - --providers.file.directory=/rules # Load dynamic configuration from one or more .toml or .yml files in a directory
      # - --providers.file.filename=/path/to/file # Load dynamic configuration from a file
      - --providers.file.watch=true # Only works on top level files in the rules folder
#      - --certificatesResolvers.dns-cloudflare.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory # LetsEncrypt Staging Server - uncomment when testing
      - --certificatesResolvers.dns-cloudflare.acme.email=$CLOUDFLARE_EMAIL
      - --certificatesResolvers.dns-cloudflare.acme.storage=/acme.json
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.provider=cloudflare
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.resolvers=1.1.1.1:53,1.0.0.1:53
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.delayBeforeCheck=90 # To delay DNS check and reduce LE hitrate
    volumes:
      - $DOCKERDIR/traefik2/rules/cloudserver:/rules # file provider directory
      - /var/run/docker.sock:/var/run/docker.sock:ro # If you use Docker Socket Proxy, comment this line out
      - $DOCKERDIR/traefik2/acme/acme.json:/acme.json # cert location - you must create this empty file and change permissions to 600
      - $DOCKERDIR/logs/cloudserver/traefik:/logs # for fail2ban or crowdsec
    environment:
       <<: *default-tz
       #CF_EMAIL: $CLOUDFLARE_EMAIL
       CF_EMAIL_FILE: /run/secrets/cf_email
       #CF_API_KEY_FILE: /run/secrets/cf_api_key
       #CF_API_TOKEN_FILE: /run/secrets/cf_token
       CF_DNS_API_TOKEN_FILE: /run/secrets/cf_dns_api_token
       HTPASSWD_FILE: /run/secrets/htpasswd # HTPASSWD_FILE can be whatever as it is not used/called anywhere.
       DOMAINNAME: $DOMAINNAME # Passing the domain name to the traefik container to be able to use the variable in rules. 
       LOG_LEVEL: WARN
    secrets:
      - cf_email
      - cf_api_key
      - cf_token
      - cf_dns_api_token
      - htpasswd
    labels:
      - "traefik.enable=true"
      - "com.centurylinklabs.watchtower.enable=false"
      # HTTP-to-HTTPS Redirect
      - "traefik.http.routers.http-catchall.entrypoints=http"
      - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      # HTTP Routers
      - "traefik.http.routers.traefik-rtr.entrypoints=https"
      - "traefik.http.routers.traefik-rtr.rule=Host(`traefik.$DOMAINNAME`)"
      - "traefik.http.routers.traefik-rtr.tls=true" # Some people had 404s without this
#      - "traefik.http.routers.traefik-rtr.tls.certresolver=dns-cloudflare" # Comment out this line after first run of traefik to force the use of wildcard certs
#      - "traefik.http.routers.traefik-rtr.tls.domains[0].main=$DOMAINNAME"
#      - "traefik.http.routers.traefik-rtr.tls.domains[0].sans=*.$DOMAINNAME"
      # - "traefik.http.routers.traefik-rtr.tls.domains[1].main=$DOMAINNAME2" # Pulls main cert for second domain
      # - "traefik.http.routers.traefik-rtr.tls.domains[1].sans=*.$DOMAINNAME2" # Pulls wildcard cert for second domain
      ## Services - API
      - "traefik.http.routers.traefik-rtr.service=api@internal"
      ## Middlewares
#      - "traefik.http.routers.traefik-rtr.middlewares=chain-oauth@file,middlewares-rate-limit@file,middlewares-secure-headers@file,middlewares-compress@file"
      - "traefik.http.routers.traefik-rtr.middlewares=chain-oauth@file,middlewares-rate-limit@file,middlewares-secure-headers@file"

# Updates cloudflare DNS
  cloudflare-ddns:
    <<: *common-keys-core # See EXTENSION FIELDS at the top
    image: oznu/cloudflare-ddns:latest
    container_name: cloudflare-ddns
    environment:
      API_KEY_FILE: /run/secrets/cf_token
      ZONE: $DOMAINNAME
      PROXIED: "true"
    secrets:
      - cf_token
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

  cloudflare-ddnsawl:
    <<: *common-keys-core # See EXTENSION FIELDS at the top
    image: oznu/cloudflare-ddns:latest
    container_name: cloudflare-ddnsawl
    environment:
      API_KEY_FILE: /run/secrets/awl_cf_token
      ZONE: $SECONDDOMAINNAME
      PROXIED: "true"
    secrets:
      - awl_cf_token
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
      
  certdumper:
    <<: *common-keys-core # See EXTENSION FIELDS at the top
    image: ghcr.io/kereis/traefik-certs-dumper:edge
    container_name: traefik_certdumper
    volumes:
      - $DOCKERDIR/traefik2/acme:/traefik:ro
      - $DOCKERDIR/shared:/output:rw
    environment:
      - DOMAIN=$DOMAINNAME
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

# Google OAuth - Single Sign On using OAuth 2.0
  oauth:
    <<: *common-keys-core
    image: thomseddon/traefik-forward-auth:latest
    container_name: oauth
    # Allow apps to bypass OAuth. Radarr example below will bypass OAuth if API key is present in the request (eg. from NZB360 mobile app).
    # While this is one way, the recommended way is to bypass authentication using Traefik labels shown in some of the -Arr apps in this file.
    # command: --rule.radarr.action=allow --rule.radarr.rule="Headers(`X-Api-Key`, `$RADARR_API_KEY`)"
    # command: --rule.sabnzbd.action=allow --rule.sabnzbd.rule="HeadersRegexp(`X-Forwarded-Uri`, `$SABNZBD_API_KEY`)"
    environment:
      CONFIG: "/config"
      COOKIE_DOMAIN: $DOMAINNAME
      INSECURE_COOKIE: false
      AUTH_HOST: oauth.$DOMAINNAME
      URL_PATH: "/_oauth"
      LOG_LEVEL: "warn" # set to trace while testing bypass rules trace, debug, info, warn, error, fatal
      LOG_FORMAT: text
      LIFETIME: 2678400 # 1 month
      DEFAULT_ACTION: "auth"
      DEFAULT_PROVIDER: "google"
    secrets:
      - source: traefik_forward_auth
        target: /config
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.oauth-rtr.tls=true"
      - "traefik.http.routers.oauth-rtr.entrypoints=https"
      - "traefik.http.routers.oauth-rtr.rule=Host(`oauth.$DOMAINNAME`)"
          ## Middlewares
      - "traefik.http.routers.oauth-rtr.middlewares=chain-oauth@file"
      ## Docker Network
      - "traefik.docker.network=mediaserver"
      ## HTTP Services
      - "traefik.http.routers.oauth-rtr.service=oauth-svc"
      - "traefik.http.services.oauth-svc.loadbalancer.server.port=4181"

# Portainer - WebUI for Containers     
  portainer:
    <<: *common-keys-core
    image: portainer/portainer-ce:latest # Use portainer-ce if you do no have a Business Edition license key
    container_name: portainer
    command: -H unix:///var/run/docker.sock # # Use Docker Socket Proxy instead for improved security
    ports:
      - "$PORTAINER_PORT:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro # # Use Docker Socket Proxy instead for improved security
      - $DOCKERDIR/portainer/data:/data 
    environment:
      <<: *default-tz
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.portainer-rtr.entrypoints=https"
      - "traefik.http.routers.portainer-rtr.rule=Host(`portainer.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.portainer-rtr.middlewares=chain-oauth@file"
      ## Docker Network
      - "traefik.docker.network=mediaserver"
      ## HTTP Services
      - "traefik.http.routers.portainer-rtr.service=portainer-svc"
      - "traefik.http.services.portainer-svc.loadbalancer.server.port=9000"
      

############################# DOWNLOADERS

#Docker container which runs Transmission torrent client with WebUI while connecting to OpenVPN. 
  transmission-openvpn:
    <<: *common-keys-core # See EXTENSION FIELDS at the top
    image: haugene/transmission-openvpn:latest
    container_name: transmission-openvpn
    ports:
      - "$TRANSMISSION_PORT:9091"
#      - '$PINCHFLAT_PORTS:8945'
    cap_add:
      - NET_ADMIN
    devices:
      - /dev/net/tun #on QNAP you need QVPN installed for this to work
    dns:
#      - 8.8.8.8
#      - 8.8.4.4
#      - 209.222.18.222
#      - 209.222.18.218
      - 1.1.1.1
      - 1.0.0.1
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - $DOCKERDIR/transmission-openvpn/data:/data
      - $DOCKERDIR/transmission-openvpn/config:/config
      - $USERDOWNLOAD/Torrents:/downloads
      - $USERDOWNLOAD/Torrents:/data/watch
      - $USERDOWNLOAD/Torrents/Completed:/data/completed
      - $USERDOWNLOAD/Torrents/Incomplete:/data/incomplete
    environment:
      <<: *default-tz
      CREATE_TUN_DEVICE: "true"
      OPENVPN_PROVIDER: PIA
      OPENVPN_USERNAME: $PIA_USERNAME
      OPENVPN_PASSWORD: $PIA_PASSWORD
      PIA_OPENVPN_CONFIG_BUNDLE: openvpn
      OPENVPN_CONFIG: "ca_toronto"
      OPENVPN_OPTS: "--inactive 3600 --ping 10 --ping-exit 60"
      LOCAL_NETWORK: "$LOCAL_NETWORK"
      UMASK_SET: 2
      TRANSMISSION_RPC_AUTHENTICATION_REQUIRED: "true"
      TRANSMISSION_RPC_HOST_WHITELIST: "127.0.0.1,10.0.27.*,192.168.2.*"
      TRANSMISSION_RPC_USERNAME: $TRANSMISSION_USER
      TRANSMISSION_RPC_PASSWORD: $TRANSMISSION_PASS
      TRANSMISSION_UMASK: 2
      TRANSMISSION_RATIO_LIMIT: 0
      TRANSMISSION_RATIO_LIMIT_ENABLED: "true"
      TRANSMISSION_INCOMPLETE_DIR: /downloads/Incomplete
      TRANSMISSION_INCOMPLETE_DIR_ENABLED: "true"
      TRANSMISSION_WATCH_DIR: /downloads
      TRANSMISSION_WATCH_DIR_ENABLED: "true"
      TRANSMISSION_DOWNLOAD_DIR: /downloads/Completed
#    extra_hosts:
#      - "www.privateinternetaccess.com:104.16.41.63"
#      - "ca-toronto.privacy.network:179.61.197.11"
    logging:
        driver: json-file
        options:
            max-size: 10m
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.transmission-vpn-rtr.entrypoints=https"
      - "traefik.http.routers.transmission-vpn-rtr.rule=Host(`trans.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.transmission-vpn-rtr.middlewares=chain-oauth@file"
      ## Docker Network
      - "traefik.docker.network=mediaserver"
      ## HTTP Services
      - "traefik.http.routers.transmission-vpn-rtr.service=transmission-vpn-svc"
      - "traefik.http.services.transmission-vpn-svc.loadbalancer.server.port=9091"          
      - "com.centurylinklabs.watchtower.enable=true"

############################# INDEXERS
# Prowlarr - Torrent proxy
  prowlarr:
    <<: *common-keys-core # See EXTENSION FIELDS at the top
    #image: ghcr.io/linuxserver/prowlarr:develop
    image: ghcr.io/linuxserver/prowlarr:latest
    container_name: prowlarr
    ports:
      - "$PROWLARR_PORT:9696"
    volumes:
      - "/etc/localtime:/etc/localtime:ro"
      - $DOCKERDIR/prowlarr:/config
      - $USERDOWNLOAD/Torrents:/downloads
    environment:
      <<: *default-tz-puid-pgid
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.prowlarr-rtr.entrypoints=https"
      - "traefik.http.routers.prowlarr-rtr.rule=Host(`prowlarr.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.prowlarr-rtr.middlewares=chain-oauth@file"
      ## Docker Network
      - "traefik.docker.network=mediaserver"
      ## HTTP Services
      - "traefik.http.routers.prowlarr-rtr.service=prowlarr-svc"
      - "traefik.http.services.prowlarr-svc.loadbalancer.server.port=9696"
      - "com.centurylinklabs.watchtower.enable=true"
      
#Sabnzbd makes Usenet as simple and streamlined as possible by automating everything we can.
  sabnzbd:
    <<: *common-keys-core # See EXTENSION FIELDS at the top
    image: lscr.io/linuxserver/sabnzbd:latest
    container_name: sabnzbd
    ports:
      - "$SABNZBD_PORT:8080"
    environment:
      <<: *default-tz-puid-pgid
      #UMASK_SET: 002
    volumes:
      - $DOCKERDIR/sabnzbd:/config      
      - $USERDOWNLOAD/Torrents:/downloads      
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.sabnzbd-rtr.entrypoints=https"
      - "traefik.http.routers.sabnzbd-rtr.rule=Host(`sabnzbd.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.sabnzbd-rtr.middlewares=chain-oauth@file"
      ## Docker Network
      - "traefik.docker.network=mediaserver"
      ## HTTP Services
      - "traefik.http.routers.sabnzbd-rtr.service=sabnzbd-svc"
      - "traefik.http.services.sabnzbd-svc.loadbalancer.server.port=8080"
      - "com.centurylinklabs.watchtower.enable=true"
      
############################# PVRS
# Sonarr - TV management
  sonarr:
    <<: *common-keys-core # See EXTENSION FIELDS at the top
    image: linuxserver/sonarr:latest
    container_name: sonarr
    ports:
      - "$SONARR_PORT:8989"
    volumes:
      - "/etc/localtime:/etc/localtime:ro"
      - $DOCKERDIR/sonarr:/config
      - $USERDOWNLOAD/Torrents:/downloads
      - $MEDIASHARE/Videos/TV:/TV
      - $MEDIASHARE/Videos/:/Media
    environment:
      <<: *default-tz-puid-pgid
    labels:
      - "traefik.enable=true"
      ## HTTP Routers Auth Bypass
      - "traefik.http.routers.sonarr-rtr-bypass.entrypoints=https"
      #- "traefik.http.routers.sonarr-rtr-bypass.rule=Host(`sonarr.$DOMAINNAME`) && (Headers(`X-Api-Key`, `$SONARR_API_KEY`) || Query(`apikey`, `$SONARR_API_KEY`))"
#      - "traefik.http.routers.sonarr-rtr-bypass.rule=Host(`sonarr.$DOMAINNAME`) && Headers(`traefik-auth-bypass-key`, `$TRAEFIK_AUTH_BYPASS_KEY`)" # Bypass Auth for LunaSea on iOS
      - "traefik.http.routers.sonarr-rtr-bypass.priority=100"
      ## HTTP Routers Auth
      - "traefik.http.routers.sonarr-rtr.entrypoints=https"
      - "traefik.http.routers.sonarr-rtr.rule=Host(`sonarr.$DOMAINNAME`)"
      - "traefik.http.routers.sonarr-rtr.priority=99"
      ## Middlewares
#      - "traefik.http.routers.sonarr-rtr-bypass.middlewares=chain-no-auth@file"
      - "traefik.http.routers.sonarr-rtr.middlewares=chain-oauth@file"
      ## Docker Network
      - "traefik.docker.network=mediaserver"
      ## HTTP Services
      - "traefik.http.routers.sonarr-rtr.service=sonarr-svc"
      - "traefik.http.routers.sonarr-rtr-bypass.service=sonarr-svc"
      - "traefik.http.services.sonarr-svc.loadbalancer.server.port=8989"
      - "com.centurylinklabs.watchtower.enable=true"

# Radarr - Movie management
# Set url_base in radarr settings if using PathPrefix
  radarr:
    <<: *common-keys-core # See EXTENSION FIELDS at the top
    image: linuxserver/radarr:latest
    container_name: radarr
    ports:
      - "$RADARR_PORT:7878"
    volumes:
      - "/etc/localtime:/etc/localtime:ro"
      - $DOCKERDIR/radarr:/config
      - $USERDOWNLOAD/Torrents:/downloads
      - $MEDIASHARE/Videos/Movies:/movies
      - $MEDIASHARE/Videos/:/Media
    environment:
      <<: *default-tz-puid-pgid
    labels:
      - "traefik.enable=true"
      ## HTTP Routers Auth Bypass
      - "traefik.http.routers.radarr-rtr-bypass.entrypoints=https"
      #- "traefik.http.routers.radarr-rtr-bypass.rule=Host(`radarr.$DOMAINNAME`) && (Headers(`X-Api-Key`, `$RADARR_API_KEY`) || Query(`apikey`, `$RADARR_API_KEY`))"
#      - "traefik.http.routers.radarr-rtr-bypass.rule=Host(`radarr.$DOMAINNAME`) && Headers(`traefik-auth-bypass-key`, `$TRAEFIK_AUTH_BYPASS_KEY`)" # Bypass Auth for LunaSea on iOS
      - "traefik.http.routers.radarr-rtr-bypass.priority=100"
      ## HTTP Routers Auth
      - "traefik.http.routers.radarr-rtr.entrypoints=https"
      - "traefik.http.routers.radarr-rtr.rule=Host(`radarr.$DOMAINNAME`)"
      - "traefik.http.routers.radarr-rtr.priority=99"
      ## Middlewares
#      - "traefik.http.routers.radarr-rtr-bypass.middlewares=chain-no-auth@file"
      - "traefik.http.routers.radarr-rtr.middlewares=chain-oauth@file"
      ## Docker Network
      - "traefik.docker.network=mediaserver"
      ## HTTP Services
      - "traefik.http.routers.radarr-rtr.service=radarr-svc"
      - "traefik.http.routers.radarr-rtr-bypass.service=radarr-svc"
      - "traefik.http.services.radarr-svc.loadbalancer.server.port=7878"
      - "com.centurylinklabs.watchtower.enable=true"

#Readarr - Book Manager and Automation (Sonarr for Ebooks)
  readarr:
    <<: *common-keys-core # See EXTENSION FIELDS at the top
    image: linuxserver/readarr:nightly
    container_name: readarr
    ports:
      - "$READARR_PORT:8787"
    volumes:
      - "/etc/localtime:/etc/localtime:ro"
      - $DOCKERDIR/readarr:/config
      - $MEDIASHARE/Books:/books
      - $USERDOWNLOAD/Torrents:/downloads
    environment:
      <<: *default-tz-puid-pgid
      UMASK: 002
    labels:
      - "traefik.enable=true"
      ## HTTP Routers Auth
      - "traefik.http.routers.readarr-rtr.entrypoints=https"
      - "traefik.http.routers.readarr-rtr.rule=Host(`readarr.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.readarr-rtr.middlewares=chain-oauth@file"
      ## Docker Network
      - "traefik.docker.network=mediaserver"
      ## HTTP Services
      - "traefik.http.routers.readarr-rtr.service=readarr-svc"
      - "traefik.http.services.readarr-svc.loadbalancer.server.port=8787"
      - "com.centurylinklabs.watchtower.enable=true"

# BookBounty is a tool for finding missing Readarr books
  bookbounty:
    <<: *common-keys-media # See EXTENSION FIELDS at the top
    container_name: bookbounty
    image: thewicklowwolf/bookbounty:latest
    ports:
      - "$BOOKBOUNTY_PORT:5000"
    volumes:
      - "/etc/localtime:/etc/localtime:ro"
      - $DOCKERDIR/bookbounty/config:/bookbounty/config
      - $USERDOWNLOAD/Torrents/Completed/Books:/bookbounty/downloads
    environment:
      <<: *default-tz-puid-pgid
      readarr_address: "http://$SERVER_IP:8787"
      readarr_api_key: "$READARR_API_KEY"
      selected_path_type: "folder"
      library_scan_on_completion: "true"
    labels:
      - "traefik.enable=true"
      ## HTTP Routers Auth
      - "traefik.http.routers.bookbounty-rtr.entrypoints=https"
      - "traefik.http.routers.bookbounty-rtr.rule=Host(`bookbounty.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.bookbounty-rtr.middlewares=chain-oauth@file"
      ## Docker Network
      - "traefik.docker.network=mediaserver"
      ## HTTP Services
      - "traefik.http.routers.bookbounty-rtr.service=bookbounty-svc"
      - "traefik.http.services.bookbounty-svc.loadbalancer.server.port=5000"
      - "com.centurylinklabs.watchtower.enable=true"

# The one stop solution for all your e-book needs. Comprehensive e-book software.
  calibre:
    <<: *common-keys-core # See EXTENSION FIELDS at the top
    container_name: calibre
    image: ghcr.io/linuxserver/calibre:latest
    ports:
      - "$CALIBRE_PORT:8080"
      - "$CALIBRE_PORT2:8081"
      - "$CALIBRE_PORT3:8181"
    volumes:
      - $DOCKERDIR/calibre/config:/config
      - $DOCKERDIR/calibre/uploads:/uploads
      - $DOCKERDIR/calibre/plugins:/plugins
      - $MEDIASHARE/Books:/books
      - $USERDOWNLOAD/Torrents:/downloads
    environment:
      <<: *default-tz-puid-pgid
      UMASK: 002
    labels:
      - "traefik.enable=true"
      ## HTTP Routers Auth
      - "traefik.http.routers.calibre-rtr.entrypoints=https"
      - "traefik.http.routers.calibre-rtr.rule=Host(`calibre.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.calibre-rtr.middlewares=chain-oauth@file"
      ## Docker Network
      - "traefik.docker.network=mediaserver"
      ## HTTP Services
      - "traefik.http.routers.calibre-rtr.service=calibre-svc"
      - "traefik.http.services.calibre-svc.loadbalancer.server.port=8080"
      - "com.centurylinklabs.watchtower.enable=true"

# Is a web app providing a clean interface for browsing, reading and downloading eBooks using an existing Calibre database
  calibre-web:
    <<: *common-keys-core # See EXTENSION FIELDS at the top
    container_name: calibre-web
    image: linuxserver/calibre-web:nightly
    ports:
      - "$CALIBRE_WEB_PORT:8083"
    environment:
      <<: *default-tz-puid-pgid
      DOCKER_MODS: linuxserver/mods:universal-calibre
    volumes:
      - $DOCKERDIR/calibre-web/config:/config
      - $MEDIASHARE/Books:/books
      - $USERDOWNLOAD/Torrents:/downloads
    labels:
      - "traefik.enable=true"
      ## HTTP Routers Auth
      - "traefik.http.routers.calibre-web-rtr.entrypoints=https"
      - "traefik.http.routers.calibre-web-rtr.rule=Host(`calibre-web.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.calibre-web-rtr.middlewares=chain-oauth@file"
      ## Docker Network
      - "traefik.docker.network=mediaserver"
      ## HTTP Services
      - "traefik.http.routers.calibre-web-rtr.service=calibre-web-svc"
      - "traefik.http.services.calibre-web-svc.loadbalancer.server.port=8083"
      - "com.centurylinklabs.watchtower.enable=true"

############################# MEDIA Server
# Plex - Media Server
  plex:
    <<: *common-keys-core # See EXTENSION FIELDS at the top
    image: binhex/arch-plexpass:latest
    container_name: plex
    hostname: plex.$DOMAINNAME
    ports:
      - "$PLEX_PORT:32400/tcp"
      - "3005:3005/tcp"
      - "8324:8324/tcp"
      - "32469:32469/tcp"
      - "1901:1900/udp" # conflicts with xTeVe and Synology default ports
      - "32410:32410/udp"
      - "32412:32412/udp"
      - "32413:32413/udp"
      - "32414:32414/udp"
      - "33400:33400"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - $DOCKERDIR/plex:/config
      - $MEDIASHARE:/data
      - /dev/shm:/transcode # Offload transcoding to RAM if you have enough RAM        
    devices:
      - /dev/dri:/dev/dri # for harware transcoding must have plex pass before chmod -R 777 /dev/dri
    environment:
      <<: *default-tz
      PUID: 0 #need to set root so plex can access /dev/dri for hw transcoding
      PGID: 0 #need to set root so plex can access /dev/dri for hw transcoding
      UMASK: "000"
      HOSTNAME: "Gillis-Plex"
      PLEX_CLAIM: $PLEX_CLAIM
      ADVERTISE_IP: https://plex.$DOMAINNAME:443,https://$SERVER_IP:32400
      ALLOWED_NETWORKS: $LOCAL_NETWORK
      VERSION: "docker"
    labels:
#      - "traefik.enable=true"
#      ## HTTP Routers
#      - "traefik.http.routers.plex-rtr.entrypoints=https"
#      - "traefik.http.routers.plex-rtr.rule=Host(`plex.${DOMAINNAME}`, `${DOMAINNAME}`)"
#      - "traefik.http.routers.plex-rtr.rule=Host(`plex.${DOMAINNAME}`)"
#      - "traefik.http.routers.plex-rtr.middlewares=https_redirect"
#      - "traefik.http.routers.plexms-rtr.tls=true"
#      ## Middlewares
#      - "traefik.http.middlewares.https_redirect.redirectscheme.scheme=https"
#      - "traefik.http.routers.plex-rtr.middlewares=chain-no-auth@file"
#      ## Docker Network
#      - "traefik.docker.network=mediaserver"
#      ## HTTP Services
#      - "traefik.http.routers.plex-rtr.service=plex-svc"
#      - "traefik.http.services.plex-svc.loadbalancer.server.port=32400"
      - "traefik.enable=true"
      # HTTP Routers
      - "traefik.http.routers.plex-rtr.entrypoints=https"
#"Request has been aborted [172.69.130.220:26920 - /:/eventsource/notifications?X-Plex-Token=V5s3JHBy41d16n1EU84z]: net/http: abort Handler" middlewareName=traefik-internal-recovery middlewareType=Recovery
#      - "traefik.http.routers.plex-rtr.rule=Host(`plex.${DOMAINNAME}`, `${DOMAINNAME}`)"
      - "traefik.http.routers.plex-rtr.rule=Host(`plex.${DOMAINNAME}`)"
      # Middlewares
      - "traefik.http.routers.plex-rtr.middlewares=chain-no-auth@file"
      ## Docker Network
      - "traefik.docker.network=mediaserver"
      # HTTP Services
      - "traefik.http.routers.plex-rtr.service=plex-svc"
      - "traefik.http.services.plex-svc.loadbalancer.server.port=32400"
      - "com.centurylinklabs.watchtower.enable=true"

# ErsatzTV is beta software for configuring and streaming custom live channels using your media library.
  ersatztv:
    <<: *common-keys-core # See EXTENSION FIELDS at the top
    image: jasongdove/ersatztv:develop-vaapi
    container_name: ersatztv
    ports:
      - "$ERSATZTV_PORT:8409"
    volumes:
      - $DOCKERDIR/ersatztv:/root/.local/share/ersatztv
      - $MEDIASHARE/Videos:/media:ro #optional
    devices:
      - /dev/dri:/dev/dri # for harware transcoding must have plex pass before chmod -R 777 /dev/dri
    environment:
      <<: *default-tz-puid-pgid
    labels:
      - "traefik.enable=true"
      ## HTTP Routers Auth
      - "traefik.http.routers.ersatztv-rtr.entrypoints=https"
      - "traefik.http.routersersatztv-rtr.rule=Host(`ersatztv.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.ersatztv-rtr.middlewares=chain-oauth@file"
      ## Docker Network
      - "traefik.docker.network=mediaserver"
      ## HTTP Services
      - "traefik.http.routers.ersatztv-rtr.service=ersatztv-svc"
      - "traefik.http.services.ersatztv-svc.loadbalancer.server.port=8409"
      - "com.centurylinklabs.watchtower.enable=true"
      
# YoutubeDL-Material is a Material Design frontend for youtube-dl. It's coded using Angular 15 for the frontend, and Node.js on the backend.
  pinchflat:
    <<: *common-keys-apps # See EXTENSION FIELDS at the top
    image: ghcr.io/kieraneglin/pinchflat:latest
    container_name: pinchflat
# adding network_mode & depends on to use vpn
#    network_mode: "service:transmission-openvpn"
#   depends_on:
#      - transmission-openvpn
    ports:
        - '$PINCHFLAT_PORTS:8945'
    environment: 
        <<: *default-tz-puid-pgid
    volumes:
        - $DOCKERDIR/pinchflat/config:/config
        - $MEDIASHARE/Videos/MusicVideos/Downloads:/downloads
    labels:
    - "com.centurylinklabs.watchtower.enable=true"


############################# MEDIA FILE MANAGEMENT
# Bazarr - Subtitle Management
  bazarr:
    <<: *common-keys-core # See EXTENSION FIELDS at the top
    image: lscr.io/linuxserver/bazarr:latest
    container_name: bazarr
    ports:
      - "$BAZARR_PORT:6767"
    volumes:
      - $DOCKERDIR/bazarr/config:/config
      - $MEDIASHARE/Videos/Movies:/movies #optional
      - $MEDIASHARE/Videos/TV:/tv #optional
      - $MEDIASHARE/Videos/:/Media
    environment:
      <<: *default-tz-puid-pgid
    labels:
      - "traefik.enable=true"
      ## HTTP Routers Auth
      - "traefik.http.routers.bazarr-rtr.entrypoints=https"
      - "traefik.http.routers.bazarr-rtr.rule=Host(`bazarr.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.bazarr-rtr.middlewares=chain-oauth@file"
      ## Docker Network
      - "traefik.docker.network=mediaserver"
      ## HTTP Services
      - "traefik.http.routers.bazarr-rtr.service=bazarr-svc"
      - "traefik.http.services.bazarr-svc.loadbalancer.server.port=6767"
      - "com.centurylinklabs.watchtower.enable=true"

############################# UTILITIES
# Dozzle is a simple, lightweight application that provides you with a web based interface to monitor your Docker container logs live      
  dozzle:
    <<: *common-keys-core # See EXTENSION FIELDS at the top
    image: amir20/dozzle:latest
    container_name: dozzle
    ports:
      - "$DOZZLE_PORT:8080"
    environment:
      DOZZLE_LEVEL: info
      DOZZLE_TAILSIZE: 300
      DOZZLE_FILTER: "status=running"
      # DOZZLE_FILTER: "label=log_me" # limits logs displayed to containers with this label
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock # Use Docker Socket Proxy instead for improved security
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.dozzle-rtr.entrypoints=https"
      - "traefik.http.routers.dozzle-rtr.rule=Host(`dozzle.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.dozzle-rtr.middlewares=chain-oauth@file"
      ## Docker Network
      - "traefik.docker.network=mediaserver"
      ## HTTP Services
      - "traefik.http.routers.dozzle-rtr.service=dozzle-svc"
      - "traefik.http.services.dozzle-svc.loadbalancer.server.port=8080"
      - "com.centurylinklabs.watchtower.enable=true"

# watchtower - Update all the containers automagically
  watchtower:
    <<: *common-keys-core
    image: containrrr/watchtower:latest
    container_name: watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      <<: *default-tz-puid-pgid
      WATCHTOWER_LABEL_ENABLE: true
      WATCHTOWER_NOTIFICATIONS: shoutrrr
      WATCHTOWER_NOTIFICATION_URL: discord://${DISCORD_TOKEN}@${DISCORD_ID}
      WATCHTOWER_NOTIFICATION_TEMPLATE: "{{range .}}{{.Time.Format \"12-01-2020 15:04:05\"}} ({{.Level}}): {{.Message}}{{println}}{{end}}"
      WATCHTOWER_REMOVE_VOLUMES: true
      WATCHTOWER_INCLUDE_RESTARTING: true
      WATCHTOWER_POLL_INTERVAL: 36000
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

#  test-container: 
#    <<: *common-keys-core
#    image: containrrr/hello-world:latest
#    container_name: hello-world
#    environment:
#      <<: *default-tz-puid-pgid
#    labels:
#      - "com.centurylinklabs.watchtower.enable=true"


# Heimdall a webpage landing page with all your apps
  heimdall:
    <<: *common-keys-core # See EXTENSION FIELDS at the top
    image: linuxserver/heimdall:latest
    container_name: heimdall
    ports:
      - "$HEIMDALL_PORT:80"
    volumes:
      - $DOCKERDIR/heimdall:/config
    environment:
      <<: *default-tz
      PUID: $PUID
      PGID: 100 #can't be an admin group.
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.heimdall-rtr.entrypoints=https"
      - "traefik.http.routers.heimdall-rtr.rule=Host(`heimdall.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.heimdall-rtr.middlewares=chain-oauth@file"
      ## Docker Network
      - "traefik.docker.network=mediaserver"
      ## HTTP Services
      - "traefik.http.routers.heimdall-rtr.service=heimdall-svc"
      - "traefik.http.services.heimdall-svc.loadbalancer.server.port=80"
      - "com.centurylinklabs.watchtower.enable=true"

      
# Heimdall using this for internal with ip instead of domain names
  heimdallint:
    <<: *common-keys-core # See EXTENSION FIELDS at the top
    image: linuxserver/heimdall:latest
    container_name: heimdallint
    ports:
      - "$HEIMDALLINT_PORT:80"
    volumes:
      - $DOCKERDIR/heimdallint:/config
    environment:
      <<: *default-tz
      PUID: $PUID
      PGID: "100" #can't be an admin group.
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.heimdallint-rtr.entrypoints=https"
      - "traefik.http.routers.heimdallint-rtr.rule=Host(`heimdallint.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.heimdallint-rtr.middlewares=chain-oauth@file"
      ## Docker Network
      - "traefik.docker.network=mediaserver"
      ## HTTP Services
      - "traefik.http.routers.heimdallint-rtr.service=heimdallint-svc"
      - "traefik.http.services.heimdallint-svc.loadbalancer.server.port=80"
      - "com.centurylinklabs.watchtower.enable=true"

#Overseerr is a request management and media discovery tool built to work with your existing Plex ecosystem.
  overseerr:
    <<: *common-keys-core # See EXTENSION FIELDS at the top
    image: lscr.io/linuxserver/overseerr:latest
    container_name: overseerr
    ports:
      - "$OVERSEERR_PORT:5055"
    volumes:
      - $DOCKERDIR/overseerr:/config
    environment:
      <<: *default-tz-puid-pgid
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.overseerr-rtr.entrypoints=https"
      - "traefik.http.routers.overseerr-rtr.rule=Host(`overseerr.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.overseerr-rtr.middlewares=chain-oauth@file"
      ## Docker Network
      - "traefik.docker.network=mediaserver"
      ## HTTP Services
      - "traefik.http.routers.overseerr-rtr.service=overseerr-svc"
      - "traefik.http.services.overseerr-svc.loadbalancer.server.port=5055"    
      - "com.centurylinklabs.watchtower.enable=true"
      
  tautulli:
    <<: *common-keys-core # See EXTENSION FIELDS at the top
    image: linuxserver/tautulli:latest
    container_name: tautulli
    ports:
      - "$TAUTULLI_PORT:8181"
    volumes:
      - $DOCKERDIR/tautulli/config:/config
      - $DOCKERDIR/tautulli/logs:/logs:ro
      - $DOCKERDIR/plex/Plex Media Server/Logs:/plex_logs:ro
    environment:
      <<: *default-tz-puid-pgid
    labels:
      - "traefik.enable=true"
      ## HTTP Routers Auth Bypass
      - "traefik.http.routers.tautulli-rtr-bypass.entrypoints=https"
#      - "traefik.http.routers.tautulli-rtr-bypass.rule=Host(`tautulli.$DOMAINNAME`) && Headers(`traefik-auth-bypass-key`, `$TRAEFIK_AUTH_BYPASS_KEY`)" # Bypass Auth for LunaSea on iOS
      - "traefik.http.routers.tautulli-rtr-bypass.priority=100"
      ## HTTP Routers
      - "traefik.http.routers.tautulli-rtr.entrypoints=https"
      - "traefik.http.routers.tautulli-rtr.rule=Host(`tautulli.$DOMAINNAME`)"
      - "traefik.http.routers.tautulli-rtr.priority=99"
      ## Middlewares
#      - "traefik.http.routers.tautulli-rtr-bypass.middlewares=chain-no-auth@file"
      - "traefik.http.routers.tautulli-rtr.middlewares=chain-oauth@file"
      ## Docker Network
      - "traefik.docker.network=mediaserver"
      ## HTTP Services
      - "traefik.http.routers.tautulli-rtr.service=tautulli-svc"
      - "traefik.http.routers.tautulli-rtr-bypass.service=tautulli-svc"
      - "traefik.http.services.tautulli-svc.loadbalancer.server.port=8181"
      - "com.centurylinklabs.watchtower.enable=true"

#Wizarr is a automatic user invitation system for Plex and Jellyfin
  wizarr:
    <<: *common-keys-core # See EXTENSION FIELDS at the top
    image: ghcr.io/wizarrrr/wizarr:latest    
    container_name: wizarr
    ports:
      - "$WIZARR_PORT:5690"
    volumes:
      - $DOCKERDIR/wizarr/database:/data/database
    environment:
      <<: *default-tz-puid-pgid                
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.wizarr-rtr.entrypoints=https"
      - "traefik.http.routers.wizarr-rtr.rule=Host(`wizarr.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.wizarr-rtr.middlewares=chain-oauth@file"
      ## Docker Network
      - "traefik.docker.network=mediaserver"
      ## HTTP Services
      - "traefik.http.routers.wizarr-rtr.service=wizarr-svc"
      - "traefik.http.services.wizarr-svc.loadbalancer.server.port=5690"    
      - "com.centurylinklabs.watchtower.enable=true"
      
#Guacamole - daemon
  guacd:
    <<: *common-keys-core # See EXTENSION FIELDS at the top
    image: guacamole/guacd:latest
    container_name: guacd
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

# Guacamole - Remote desktop, SSH, on Telnet on any HTML5 Browser 
  guacamole:
    <<: *common-keys-core # See EXTENSION FIELDS at the top
    image: guacamole/guacamole:latest
    container_name: guacamole
    restart: always
    ports:
      - "$GUACAMOLE_PORT:8080"
    environment:
      GUACD_HOSTNAME: guacd
      MYSQL_HOSTNAME: $DB_HOST
      MYSQL_PORT: $DB_PORT
      MYSQL_DATABASE: guacamole
      MYSQL_USER: $GUAC_MYSQL_USER
      MYSQL_PASSWORD_FILE: /run/secrets/mysql_password
    secrets:
      - mysql_password
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.guacamole-rtr.entrypoints=https"
      - "traefik.http.routers.guacamole-rtr.rule=Host(`guac.$DOMAINNAME`)"
      - "traefik.http.routers.guacamole-rtr.tls=true"
      ## Middlewares
      - "traefik.http.routers.guacamole-rtr.middlewares=chain-oauth@file,add-guacamole" 
      - "traefik.http.middlewares.add-guacamole.addPrefix.prefix=/guacamole"
      ## Docker Network
      - "traefik.docker.network=mediaserver"
      ## HTTP Services
      - "traefik.http.routers.guacamole-rtr.service=guacamole-svc"
      - "traefik.http.services.guacamole-svc.loadbalancer.server.port=8080"          
      - "com.centurylinklabs.watchtower.enable=true"

############################# DATABASE

# MariaDB - MySQL Database
  mariadb:
    <<: *common-keys-core # See EXTENSION FIELDS at the top
    container_name: mariadb
    image: linuxserver/mariadb:latest
    ports:
      - $DB_PORT:3306
    volumes:
      - $DOCKERDIR/mariadb/data:/config
    environment:
      MYSQL_ROOT_PASSWORD_FILE: /run/secrets/mysql_password
      MARIADB_PASSWORD: "insecure"
      MARIADB_ROOT_PASSWORD: "insecure"
    secrets:
      - mysql_password
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

# phpmyadmin - MySQL Database
  phpmyadmin:
    <<: *common-keys-core # See EXTENSION FIELDS at the top
    hostname: phpmyadmin
    container_name: phpmyadmin
    image: phpmyadmin/phpmyadmin:latest
    links:
      - mariadb:db
    ports:
      - $PHPMYADMIN_PORT:80
#    volumes:
#    - $DOCKERDIR/phpmyadmin:/etc/phpmyadmin
    environment:
      PMA_PORT: $DB_PORT
      PMA_ARBITRARY: 1
      MYSQL_ROOT_PASSWORD_FILE: /run/secrets/mysql_password
    secrets:
      - mysql_password
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.phpmyadmin-rtr.entrypoints=https"
      - "traefik.http.routers.phpmyadmin-rtr.rule=Host(`pma.$DOMAINNAME`)"
      - "traefik.http.routers.phpmyadmin-rtr.tls=true"
      ## Middlewares
      - "traefik.http.routers.phpmyadmin-rtr.middlewares=chain-oauth@file"
      ## Docker Network
      - "traefik.docker.network=mediaserver"
      ## HTTP Services
      - "traefik.http.routers.phpmyadmin-rtr.service=phpmyadmin-svc"
      - "traefik.http.services.phpmyadmin-svc.loadbalancer.server.port=80"    
      - "com.centurylinklabs.watchtower.enable=true"

  vaultwarden:
    <<: *common-keys-core # See EXTENSION FIELDS at the top
    image: vaultwarden/server:latest
    container_name: vaultwarden
    ports:
      - "$VAULTWARDEN_PORT:80"
    volumes:
      - $DOCKERDIR/vaultwarden:/data
    environment:
      <<: *default-tz-puid-pgid      
      ADMIN_TOKEN: $VAULTWARDEN_TOKEN
      DOMAIN: "https://vault.$DOMAINNAME"
      #WEBSOCKET_ENABLED: true  
    labels:
      - "traefik.enable=true"
      ## HTTP Routers Auth Bypass
      - "traefik.http.routers.vaultwarden-rtr-bypass.entrypoints=https"
      - "traefik.http.routers.vaultwarden-rtr-bypass.rule=Host(`vault.$DOMAINNAME`) && Headers(`traefik-auth-bypass-key`, `$TRAEFIK_AUTH_BYPASS_KEY`)" # Bypass Auth for BitWarden App
      - "traefik.http.routers.vaultwarden-rtr-bypass.priority=100"
      ## HTTP Routers Auth
      - "traefik.http.routers.vaultwarden-rtr.entrypoints=https"
      - "traefik.http.routers.vaultwarden-rtr.rule=Host(`vault.$DOMAINNAME`)"
      - "traefik.http.routers.vaultwarden-rtr.priority=99"
      ## Middlewares
      - "traefik.http.routers.vaultwarden-rtr-bypass.middlewares=chain-no-auth@file"
      - "traefik.http.routers.vaultwarden-rtr.middlewares=chain-oauth@file"
      ## Docker Network
#      - "traefik.docker.network=mediaserver"
      ## HTTP Services
      - "traefik.http.routers.vaultwarden-rtr.service=vaultwarden-svc"
      - "traefik.http.routers.vaultwarden-rtr-bypass.service=vaultwarden-svc"
      - "traefik.http.services.vaultwarden-svc.loadbalancer.server.port=80"
      - "com.centurylinklabs.watchtower.enable=true"
      
# Nextcloud is a suite of client-server software for creating and using file hosting services.
  nextcloud:
    image: nextcloud/all-in-one:latest
    restart: always
    container_name: nextcloud-aio-mastercontainer # This line is not allowed to be changed
    networks:
      #- nextcloud-aio
      - mediaserver
    volumes:
      - nextcloud_aio_mastercontainer:/mnt/docker-aio-config # This line is not allowed to be changed
      - /var/run/docker.sock:/var/run/docker.sock:ro # May be changed on macOS, Windows or docker rootless. See the applicable documentation. If adjusting, don't forget to also set 'DOCKER_SOCKET_PATH'!
    ports:
      - 87:80 # Can be removed when running behind a web server or reverse proxy (like Apache, Nginx and else). See https://github.com/nextcloud/all-in-one/blob/main/reverse-proxy.md
      - 8086:8080 #AIO Interface
      - 16002:8443 # want to be able to reach internal if required If your firewall/router has port 80 and 8443 open/forwarded and you point a domain to your server, you can get a valid certificate automatically by opening the Nextcloud AIO Interface via: https://your-domain-that-points-to-this-server.tld:8443
    environment:
      - APACHE_PORT=11000 # Is needed when running behind a web server or reverse proxy (like Apache, Nginx and else). See https://github.com/nextcloud/all-in-one/blob/main/reverse-proxy.md
      - APACHE_IP_BINDING=192.168.2.41 # Should be set when running behind a web server or reverse proxy (like Apache, Nginx and else) that is running on the same host. See https://github.com/nextcloud/all-in-one/blob/main/reverse-proxy.md
#      - host.docker.internal:$APACHE_PORT
#      - SKIP_DOMAIN_VALIDATION=true
      - NEXTCLOUD_DATADIR=$USERDIR/nextcloud #all user folders and data will be kept here
      - NEXTCLOUD_MOUNT=/share/ # Mount fro external storage
      - NEXTCLOUD_TRUSTED_CACERTS_DIR=/docker/nextcloud/Certs/CA # CA certificates in this directory will be trusted by the OS of the nexcloud container (Useful e.g. for LDAPS) See See https://github.com/nextcloud/all-in-one#how-to-trust-user-defined-certification-authorities-ca
      - SKIP_DOMAIN_VALIDATION=true
      
  photoprism:
    <<: *common-keys-core # See EXTENSION FIELDS at the top
    image: photoprism/photoprism:latest
    container_name: photoprism
    depends_on:
      - mariadb
    ports:
      - "$PHOTOPRISM_PORT:2342"
    volumes:
      - "$DOCKERDIR/photoprism:/photoprism/storage"
      - "$MEDIASHARE/PhotosOrg:/photoprism/originals"
      - "$MEDIASHARE/Photos:/photoprism/storage"
    environment:
#        <<: *default-tz-puid-pgid
        PHOTOPRISM_DISABLE_TLS: "true"
        PHOTOPRISM_HTTP_PORT: "2342"
#        PHOTOPRISM_AUTH_MODE: "public"                 # authentication mode (public, password)
        PHOTOPRISM_ADMIN_PASSWORD: /run/secrets/mysql_password
        PHOTOPRISM_ORIGINALS_LIMIT: -1
        PHOTOPRISM_HTTP_COMPRESSION: "gzip"
        PHOTOPRISM_DEBUG: "false"
        PHOTOPRISM_PUBLIC: "true"
        PHOTOPRISM_READONLY: "false"
        PHOTOPRISM_EXPERIMENTAL: "false"
        PHOTOPRISM_DISABLE_WEBDAV: "false"
        PHOTOPRISM_DISABLE_SETTINGS: "false"
        PHOTOPRISM_DISABLE_TENSORFLOW: "false"
        PHOTOPRISM_DISABLE_FACES: "false"
        PHOTOPRISM_DISABLE_CLASSIFICATION: "false"
        PHOTOPRISM_DARKTABLE_PRESETS: "false"
        PHOTOPRISM_DETECT_NSFW: "false"
        PHOTOPRISM_UPLOAD_NSFW: "true"
        PHOTOPRISM_DATABASE_DRIVER: "mysql"
        PHOTOPRISM_DATABASE_SERVER: "mariadb:3306"
        PHOTOPRISM_DATABASE_NAME: "photoprism"
        PHOTOPRISM_DATABASE_USER: "photoprism"
        PHOTOPRISM_DATABASE_PASSWORD: /run/secrets/mysql_password
        PHOTOPRISM_DATABASE_PASSWORD: "insecure"
        PHOTOPRISM_SITE_URL: "https://photos.$DOMAINNAME/"  # Public PhotoPrism URL
        PHOTOPRISM_SITE_TITLE: "GillisPhotoPrism"
        PHOTOPRISM_SITE_CAPTION: "Browse Your Life"
        PHOTOPRISM_SITE_DESCRIPTION: "Gillis' Family Pictures"
        PHOTOPRISM_SITE_AUTHOR: "Andy Gillis"
#        PHOTOPRISM_IMPORT_PATH: "$USERDIR/ajgillis/Photos"
#        HOME: "/photoprism"
        #UMASK: "000"
        #UID: "1026"
        #GID: "101"
    secrets:
      - mysql_password
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.photoprism-rtr.entrypoints=https"
      - "traefik.http.routers.photoprism-rtr.rule=Host(`photos.$DOMAINNAME`)"
      - "traefik.http.routers.photoprism-rtr.tls=true"
      ## Middlewares
      - "traefik.http.routers.photoprism-rtr.middlewares=chain-oauth@file"
      ## Docker Network
      - "traefik.docker.network=mediaserver"
      ## HTTP Services
      - "traefik.http.routers.photoprism-rtr.service=photoprism-svc"
      - "traefik.http.services.photoprism-svc.loadbalancer.server.port=2342"    
      - "com.centurylinklabs.watchtower.enable=true"

# Lidarr is a music collection manager
  lidarr:
    <<: *common-keys-core # See EXTENSION FIELDS at the top
    image: linuxserver/lidarr:latest
    container_name: lidarr
    ports:
      - "$LIDARR_PORT:8686"
    volumes:
      - "/etc/localtime:/etc/localtime:ro" 
      - $DOCKERDIR/lidarr:/config
      - $USERDOWNLOAD/Torrents:/downloads
      - $MEDIASHARE/Music:/music
      - $DOCKERDIR/shared:/shared
    environment:
      <<: *default-tz-puid-pgid
    labels:
      - "traefik.enable=true"
      ## HTTP Routers Auth Bypass
      - "traefik.http.routers.lidarr-rtr-bypass.entrypoints=https"
      - "traefik.http.routers.lidarr-rtr-bypass.tls=true"
      - "traefik.http.routers.lidarr-rtr-bypass.rule=Headers(`X-Api-Key`, `$LIDARR_API_KEY`)"
      - "traefik.http.routers.lidarr-rtr-bypass.priority=100"
      ## HTTP Routers Auth
      - "traefik.http.routers.lidarr-rtr.entrypoints=https"
      - "traefik.http.routers.lidarr-rtr.tls=true"
      - "traefik.http.routers.lidarr-rtr.rule=Host(`lidarr.$DOMAINNAME`)"
      - "traefik.http.routers.lidarr-rtr.priority=99"
      ## Middlewares
      #- "traefik.http.routers.lidarr-rtr-bypass.middlewares=chain-no-auth@file"
      - "traefik.http.routers.lidarr-rtr.middlewares=chain-oauth@file"
      ## Docker Network
      - "traefik.docker.network=mediaserver"
      ## HTTP Services
      - "traefik.http.routers.lidarr-rtr.service=lidarr-svc"
      - "traefik.http.routers.lidarr-rtr-bypass.service=lidarr-svc"
      - "traefik.http.services.lidarr-svc.loadbalancer.server.port=8686"          
      - "com.centurylinklabs.watchtower.enable=true"

# open music encyclopedia that collects music metadata and makes it available to the public.
  picard:
    <<: *common-keys-apps # See EXTENSION FIELDS at the top
    image: mikenye/picard:latest
    container_name: picard
    ports:
      - "$PICARD_PORT:5800"
    volumes:
      - "$DOCKERDIR/picard/config:/config:rw"
      - "$MEDIASHARE/Music:/Music:rw"
      - "$MEDIASHARE/Videos/MusicVideos:/MusicVides:rw"
    environment:
      <<: *default-tz-puid-pgid
      DISPLAY_WIDTH: 1920
      DISPLAY_HEIGHT: 1080
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.picard-rtr.entrypoints=https"
      - "traefik.http.routers.picard-rtr.rule=Host(`picard.$DOMAINNAME`)"
      - "traefik.http.routers.picard-rtr.tls=true"
      ## Middlewares
      - "traefik.http.routers.picard-rtr.middlewares=chain-oauth@file"
      #- "traefik.http.middlewares.add-requestrr.addPrefix.prefix=/home"
      ## Docker Network
      - "traefik.docker.network=mediaserver"
      ## HTTP Services
      - "traefik.http.routers.picard-rtr.service=picard-svc"
      - "traefik.http.services.picard-svc.loadbalancer.server.port=5800"          
      - "com.centurylinklabs.watchtower.enable=true"

#Tdarr is a self hosted web-app for automating media library transcode/remux management
  tdarr:
    <<: *common-keys-core # See EXTENSION FIELDS at the top
    image: haveagitgat/tdarr:latest
    container_name: tdarr
    ports:
      - "$TDARR_WEBUI_PORT:8265"
      - "$TDARR_SERVER_PORT:8266"
    volumes:
      - $DOCKERDIR/tdarr/server:/app/server
      - $DOCKERDIR/tdarr/configs:/app/configs
      - $DOCKERDIR/tdarr/logs:/app/logs
      - $MEDIASHARE/Videos:/media
      - $DOCKERDIR/tdarr/transcode:/temp
      - /etc/localtime:/etc/localtime:ro
    environment:
      <<: *default-tz-puid-pgid
      serverIP: $SERVER_IP
      serverPort: $TDARR_SERVER_PORT
      webUIPort: $TDARR_WEBUI_PORT
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.tdarr-rtr.entrypoints=https"
      - "traefik.http.routers.tdarr-rtr.rule=Host(`tdarr.$DOMAINNAME`)"
      - "traefik.http.routers.tdarr-rtr.tls=true"
      ## Middlewares
      - "traefik.http.routers.tdarr-rtr.middlewares=chain-oauth@file"
      #- "traefik.http.middlewares.add-requestrr.addPrefix.prefix=/home"
      ## Docker Network
      - "traefik.docker.network=mediaserver"
      ## HTTP Services
      - "traefik.http.routers.tdarr-rtr.service=tdarr-svc"
      - "traefik.http.services.tdarr-svc.loadbalancer.server.port=8265"          
      - "com.centurylinklabs.watchtower.enable=false" # Client and server version must match. Turning off autoupdate on server so clients do not get versions behind.
    
  tdarr_node:
    <<: *common-keys-core # See EXTENSION FIELDS at the top
    image: haveagitgat/tdarr_node:latest
    container_name: tdarr_node
    ports:
      - "$TDARR_NODE_PORT:8267"    
    environment:
      <<: *default-tz-puid-pgid
      nodeID: "QNAP_TVS682_Node"
      nodeIP: $SERVER_IP
      nodePort: $TDARR_NODE_PORT
      serverIP: $SERVER_IP
      serverPort: $TDARR_SERVER_PORT
    volumes:
      - $DOCKERDIR/tdarr/configs:/app/configs
      - $DOCKERDIR/tdarr/logs:/app/logs
      - $MEDIASHARE/Videos:/media
      - $DOCKERDIR/tdarr/transcode:/temp
      - /etc/localtime:/etc/localtime:ro
    labels:
      - "com.centurylinklabs.watchtower.enable=false" # Client and server version must match. Turning off autoupdate on server so clients do not get versions behind.

  bazarr:
    <<: *common-keys-core # See EXTENSION FIELDS at the top
    image: lscr.io/linuxserver/bazarr:latest
    container_name: bazarr
    ports:
      - $BAZARR_PORT:6767   
    volumes:
      - $DOCKERDIR/bazarr/config:/config
      - $MEDIASHARE/Videos/Movies:/movies #optional
      - $MEDIASHARE/Videos/TV:/TV #optional
      - $MEDIASHARE/Videos/:/Media
    environment:
      <<: *default-tz-puid-pgid      
    labels:      
      - "traefik.enable=true"
      ## HTTP Routers Auth Bypass
      - "traefik.http.routers.bazarr-rtr-bypass.entrypoints=https"
      - "traefik.http.routers.bazarr-rtr-bypass.tls=true"
      - "traefik.http.routers.bazarr-rtr-bypass.rule=Headers(`X-Api-Key`, `$BAZARR_API_KEY`)"
      - "traefik.http.routers.bazarr-rtr-bypass.priority=100"
      ## HTTP Routers Auth
      - "traefik.http.routers.bazarr-rtr.entrypoints=https"
      - "traefik.http.routers.bazarr-rtr.tls=true"
      - "traefik.http.routers.bazarr-rtr.rule=Host(`bazarr.$DOMAINNAME`)"
      - "traefik.http.routers.bazarr-rtr.priority=99"
      ## Middlewares
      #- "traefik.http.routers.bazarr-rtr-bypass.middlewares=chain-no-auth@file"
      - "traefik.http.routers.bazarr-rtr.middlewares=chain-oauth@file"
      ## Docker Network
      - "traefik.docker.network=mediaserver"
      ## HTTP Services
      - "traefik.http.routers.bazarr-rtr.service=bazarr-svc"
      - "traefik.http.routers.bazarr-rtr-bypass.service=bazarr-svc"
      - "traefik.http.services.bazarr-svc.loadbalancer.server.port=6767"          
      - "com.centurylinklabs.watchtower.enable=true"

#This is a Django application for keeping recipes and creating shopping lists which can be sent to OurGroceries.
  chowdown:
    <<: *common-keys-core # See EXTENSION FIELDS at the top
    image: gregyankovoy/chowdown:latest
    container_name: chowdown
    ports:
      - $CHOWDOWN_PORT:4000
    volumes:
      - $DOCKERDIR/chowdown:/config
      - $DOCKERDIR/shared:/shared
    environment:
      <<: *default-tz-puid-pgid
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.chowdown-rtr.entrypoints=https"
      - "traefik.http.routers.chowdown-rtr.rule=Host(`chowdown.$DOMAINNAME`)"
      - "traefik.http.routers.chowdown-rtr.tls=true"
      ## Middlewares
      - "traefik.http.routers.chowdown-rtr.middlewares=chain-no-auth@file"
      ## Docker Network
      - "traefik.docker.network=mediaserver"
      ## HTTP Services
      - "traefik.http.routers.chowdown-rtr.service=chowdown-svc"
      - "traefik.http.services.chowdown-svc.loadbalancer.server.port=4000"          
      - "com.centurylinklabs.watchtower.enable=true"

# Pihole - Ad-blocker
  pihole:
    image: pihole/pihole:latest
    container_name: pihole
    restart: always
   #docker network create --driver=macvlan --gateway=192.168.2.1 --subnet=192.168.2.0/24 --ip-range=192.168.2.1/26 -o parent=eth0 pihole_network
    networks:
      pihole_network:
        ipv4_address: 192.168.2.12
    cap_add:
      - NET_ADMIN
    dns:
#      - 127.0.0.1
      - 1.1.1.1
    ports:
      - "54:53/tcp"
      - "54:53/udp"
      - "67:67/udp"
      - "83:80/tcp"
      - "446:446/tcp"
    volumes:
       - $DOCKERDIR/pihole/dnsmasq.d:/etc/dnsmasq.d
       - $DOCKERDIR/pihole:/etc/pihole
    environment:
      <<: *default-tz      
      WEBPASSWORD_FILE: /run/secrets/pihole_password
      ServerIP: 192.168.2.12
      VIRTUAL_HOST: "pihole"
      IPv6: "false"
      DNSMASQ_LISTENING: 'all'      
    secrets:
      - pihole_password
    labels:
#       - "traefik.enable=true"
#       - "traefik.docker.network=pihole_network" #try if container is on multiple networks or built on different network first time
      ## HTTP Routers
#       - "traefik.http.routers.pihole-rtr.entrypoints=https"
#       - "traefik.http.routers.pihole-rtr.rule=Host(`pihole.$DOMAINNAME`)"
#       - "traefik.http.routers.pihole-rtr.tls=true"
      ## Middlewares
#       - "traefik.http.routers.pihole-rtr.middlewares=chain-oauth@file"
#       - "traefik.http.middlewares.add-pihole.addPrefix.prefix=/admin"
      ## HTTP Services
#       - "traefik.http.routers.pihole-rtr.service=pihole-svc"
#       - "traefik.http.services.pihole-svc.loadbalancer.server.port=8443"   
#       - "traefik.http.services.pihole-svc.loadbalancer.server.scheme=https" #add if cannot reach subdomain.domain.com needed for nextcloud and mienos
      - "com.centurylinklabs.watchtower.enable=true"

#Minecraft server builder
  mineos:
    <<: *common-keys-apps # See EXTENSION FIELDS at the top
    image: hexparrot/mineos:latest
    container_name: mineos
    ports:
    - $MINEOS_PORT:8443
    - 25565-25577:25565-25577
    volumes:
    - $DOCKERDIR/mineos:/var/games/minecraft
    - $DOCKERDIR/shared:/shared
    environment:
      <<: *default-tz
      USER_PASSWORD: $MINEOS_PASSWORD
      PUID: 0
      PGID: 0
    labels:
    - "traefik.enable=true"
      ## HTTP Routers
    - "traefik.http.routers.mineos-rtr.entrypoints=https"
    - "traefik.http.routers.mineos-rtr.rule=Host(`mineos.$DOMAINNAME`)"
    - "traefik.http.routers.mineos-rtr.tls=true"
      ## Middlewares
    - "traefik.http.routers.mineos-rtr.middlewares=chain-oauth@file"
    - "traefik.http.middlewares.add-mineos.addPrefix.prefix=/admin"
      ## Docker Network
    - "traefik.docker.network=mediaserver"
      ## HTTP Services
    - "traefik.http.routers.mineos-rtr.service=mineos-svc"
    - "traefik.http.services.mineos-svc.loadbalancer.server.port=8443"   
    - "traefik.http.services.mineos-svc.loadbalancer.server.scheme=https" #add if cannot reach subdomain.domain.com needed for nextcloud and mienos
    - "com.centurylinklabs.watchtower.enable=true"

# PHP Website for GillisOnline
  php-apache-gillisonline:
    <<: *common-keys-core # See EXTENSION FIELDS at the top
    image: php:8.0-apache
    container_name: php-apache-gillisonline
    volumes:
      - /share/Web:/var/www/html/
    ports:
      - "$GILLISONLINE_PORT:80"
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.gillisonline-rtr.entrypoints=https"
      - "traefik.http.routers.gillisonline-rtr.rule=Host(`www.$DOMAINNAME`, `${DOMAINNAME}`)"
#      - "traefik.http.routers.gillisonline-rtr.rule=Host(`www.${DOMAINNAME}`)"
      - "traefik.http.routers.gillisonline-rtr.tls=true"
      ## Middlewares
      - "traefik.http.routers.gillisonline-rtr.middlewares=chain-no-auth@file"
      ## Docker Network
      - "traefik.docker.network=mediaserver"
      ## HTTP Services
      - "traefik.http.routers.gillisonline-rtr.service=gillisonline-svc"
      - "traefik.http.services.gillisonline-svc.loadbalancer.server.port=80"          
      - "com.centurylinklabs.watchtower.enable=true"

# PHP Website for AWL
  php-apache-awl:
    <<: *common-keys-core # See EXTENSION FIELDS at the top
    image: php:8.0-apache
    container_name: php-apache-awl
    volumes:
      - /share/CACHEDEV2_DATA/homes/awl:/var/www/html/
    ports:
      - "$AWL_PORT:80"
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.awl-rtr.entrypoints=https"
      - "traefik.http.routers.awl-rtr.rule=Host(`$SECONDDOMAINNAME`)"
      - "traefik.http.routers.awl-rtr.tls=true"
      ## Middlewares
      - "traefik.http.routers.awl-rtr.middlewares=chain-no-auth@file"
      ## Docker Network
      - "traefik.docker.network=mediaserver"
      ## HTTP Services
      - "traefik.http.routers.awl-rtr.service=awl-svc"
      - "traefik.http.services.awl-svc.loadbalancer.server.port=80"          
      - "com.centurylinklabs.watchtower.enable=true"

# WireGuard® is an extremely simple yet fast and modern VPN that utilizes state-of-the-art cryptography.
  wireguard:
    <<: *common-keys-core
    image: lscr.io/linuxserver/wireguard
    container_name: wireguard
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    volumes:
      - $DOCKERDIR/wireguard/config:/config/
      - $DOCKERDIR/wireguard/lib/modules:/lib/modules/
    ports:
      - 51820:51820/udp
    environment:
      <<: *default-tz-puid-pgid
      SERVERURL: "auto"
      SERVERPORT: 51820
      PEERS: 10 #change to match how many devies you want to use Wireguard on
      PEERDNS: auto
      INTERNAL_SUBNET: 10.0.28.0 #optional
      ALLOWEDIPS: 0.0.0.0/0 #optional
    labels:
      - "com.centurylinklabs.watchtower.enable=true"